openapi: 3.0.3
info:
  title: Buddyku API
  description: |-
    this is a sample Article Server based on the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    email: rickyykurniawan98@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080
tags:
  - name: user
    description: User Service
  - name: admin
    description: Admin Service
paths:
  /users/login:
    post:
      tags:
        - user
      summary: login to get JWT
      description: login to get JWT
      operationId: loginuser
      requestBody:
        description: user login to get JWT
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "404":
          description: Wrong email and password to login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedLogin"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerError"
  /users/register:
    post:
      tags:
        - user
      summary: Register user account
      description: Register user account
      requestBody:
        description: register
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
        required: true
      responses:
        "201":
          description: Successful register
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "404":
          description: email has been taken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedRegister"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerError"
  /users/article:
    post:
      tags:
        - user
      summary: User can upload new post article
      description: User can upload new post article
      requestBody:
        description: Create New Article
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArticleRequest"
        required: true
      responses:
        "201":
          description: Successful register
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArticleResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "401":
          description: Unauthorize
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorize"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerError"
      security:
        - bearerAuth: []
  /users/detail-article/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the article to get
      tags:
        - user
      responses:
        "200":
          description: Successful get detail content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailContentData"

        "401":
          description: Unauthorize
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorize"
      security:
        - bearerAuth: []
  /users/get-point:
    get:
      tags:
        - user
      responses:
        "200":
          description: Successful get user point reward
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getPointResponse"

        "401":
          description: Unauthorize
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorize"
      security:
        - bearerAuth: []
  /admins/register:
    post:
      tags:
        - admin
      summary: Register admin account
      description: Register admin account
      requestBody:
        description: register
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminRegisterRequest"
        required: true
      responses:
        "201":
          description: Successful register
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminRegisterResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "404":
          description: email has been taken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedRegister"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerError"
  /admins/login:
    post:
      tags:
        - admin
      summary: login to get JWT admin
      description: login to get JWT admin
      requestBody:
        description: user login to get JWT
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminLoginRequest"
        required: true
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminLoginResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "404":
          description: Wrong email and password to login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedLogin"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerError"
  /admins/setpoint:
    post:
      tags:
        - admin
      summary: Admin can set point reward
      description: Admin can set point reward
      requestBody:
        description: set point reward
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetPointRequest"
        required: true
      responses:
        "201":
          description: Successful Set Point
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetPointResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerError"
        "401":
          description: Unauthorize
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorize"
      security:
        - bearerAuth: []
  /admins/all-user:
    get:
      tags:
        - admin
      summary: Admin can see all register user and user point
      description: Admin can see all register user and user point
      responses:
        "200":
          description: Get Transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllUserResponse"
        "401":
          description: Unauthorize
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorize"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerError"
      security:
        - bearerAuth: []

components:
  schemas:
    DataUser:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: "Ricky Kurnaiwan"
        email:
          type: string
          format: email
          example: "mantap@mail.com"
        point_reward:
          type: number
          example: 30
    GetAllUserResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DataUser"
        message:
          type: string
          example: "Get All User success"
        status code:
          type: integer
          format: int
          example: 200
    SetPointResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: number
              example: 1
            value_point:
              type: number
              example: 20
            status:
              type: string
              example: "Active"
            CreatedAt:
              type: string
              example: "2023-01-29T18:45:56.703378+07:00"
            UpdatedAt:
              type: string
              example: "2023-01-29T18:45:56.703378+07:00"
            DeletedAt:
              type: string
              example: "null"
    SetPointRequest:
      type: object
      properties:
        value_point:
          type: number
          example: 20
    AdminLoginRequest:
      type: object
      properties:
        name:
          type: string
          format: name
          example: "admin1"
        password:
          type: string
          format: password
          example: "password"
    AdminLoginResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            idToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTRUEgTElCIEFQSSIsImV4cCI6MTY2MjUyODQxNSwiaWF0IjoxNjYyNTI3NTE1LCJ1c2VyIjp7ImlkIjoyLCJuYW1lIjoiZ2FsYW5nIiwiZW1haWwiOiJnYWxhbmcubWFudGFwQGdtYWlsLmNvbSJ9fQ.4NPgEagQnz_ejiXRrpF6thbMPilRYRKl7s0qksopf1k"
        message:
          type: string
          example: "Login Success"
        status code:
          type: integer
          format: int
          example: 200
    AdminRegisterRequest:
      type: object
      properties:
        name:
          type: string
          format: name
          example: "madhan mantap"
        password:
          type: string
          format: password
          example: "password"
    AdminRegisterResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            name:
              type: string
              example: "admin3"
            role:
              type: string
              example: "admin3"
        message:
          type: string
          example: "Success register account"
        status code:
          type: integer
          format: int
          example: 201
    getPointResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            point_reward:
              type: number
              example: 30
        message:
          type: string
          example: "Success get point user"
        status code:
          type: integer
          format: int
          example: 200
    DetailContentData:
      type: object
      properties:
        id:
          type: number
          example: 2
        content_article:
          type: string
          example: "Wajar jika Anda berpikir bahwa audiens sekarang sangat mementingkan visual. Platform yang mengusung tampilan video dan foto, Instagram dan Tiktok"
        source:
          type: string
          example: "seputarmarketing.com/jenis-konten-artikel/"
        user_id:
          type: number
          example: 2
        CreatedAt:
          type: string
          example: "2023-01-29T18:45:56.703378+07:00"
        UpdatedAt:
          type: string
          example: "2023-01-29T18:45:56.703378+07:00"
        DeletedAt:
          type: string
          example: "null"
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "mantap@mail.com"
        password:
          type: string
          format: password
          example: "password"
    LoginResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            idToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTRUEgTElCIEFQSSIsImV4cCI6MTY2MjUyODQxNSwiaWF0IjoxNjYyNTI3NTE1LCJ1c2VyIjp7ImlkIjoyLCJuYW1lIjoiZ2FsYW5nIiwiZW1haWwiOiJnYWxhbmcubWFudGFwQGdtYWlsLmNvbSJ9fQ.4NPgEagQnz_ejiXRrpF6thbMPilRYRKl7s0qksopf1k"
        message:
          type: string
          example: "Login Success"
        status code:
          type: integer
          format: int
          example: 200
    BadRequest:
      type: object
      properties:
        message:
          type: string
          example: "bad request"
    FailedLogin:
      type: object
      properties:
        data:
          type: string
          example: ""
        message:
          type: string
          example: "Wrong email or password"
        status code:
          type: integer
          format: int
          example: 404
    ServerError:
      type: object
      properties:
        data:
          type: string
          example: ""
        message:
          type: string
          example: "Server Error"
        status code:
          type: integer
          format: int
          example: 500
    RegisterRequest:
      type: object
      properties:
        name:
          type: string
          format: name
          example: "madhan mantap"
        email:
          type: string
          format: email
          example: "mantap@mail.com"
        password:
          type: string
          format: password
          example: "password"
    ArticleRequest:
      type: object
      properties:
        content_article:
          type: string
          example: "Wajar jika Anda berpikir bahwa audiens sekarang sangat mementingkan visual. Platform yang mengusung tampilan video dan foto, Instagram dan Tiktok"
        source:
          type: string
          example: "seputarmarketing.com/jenis-konten-artikel/"
    ArticleResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/DetailContentData"
        message:
          type: string
          example: "Success Create New Post"
        status code:
          type: integer
          format: int
          example: 201
    RegisterResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/UserDataRegister"
        message:
          type: string
          example: "Success register account"
        status code:
          type: integer
          format: int
          example: 201
    UserDataRegister:
      type: object
      properties:
        name:
          type: string
          example: "lutpan"
        email:
          type: string
          example: "lutpan@gmail.com"
    FailedRegister:
      type: object
      properties:
        data:
          type: string
          example: ""
        message:
          type: string
          example: "email or password has been taken"
        status code:
          type: integer
          format: int
          example: 404
    Unauthorize:
      type: object
      properties:
        message:
          type: string
          example: "Unauthorize"
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
